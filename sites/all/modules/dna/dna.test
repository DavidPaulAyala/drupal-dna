<?php

class DNAFunctionalTests extends DrupalWebTestCase {

    public static function getInfo() {
        return array(
            'name' => 'DNA Functional Tests',
            'description' => 'Functional Tests for the DNA module.',
            'group' => 'DNA Module Tests',
        );
    }

    public function setUp() {
        parent::setUp(array('dna'));
    }

    public function testValidInput() {
        $this->drupalGet('dna_start');
        $this->assertText("DNA Module", 'Form exists and is displayed!');

        $form = array();
        $form['dna_input'] = 'ATCG';
        $this->drupalPost('dna_start', $form, t('Submit'));
        $this->assertText('ATCG', 'Diplays input string');
        $this->assertText('TAGC', 'Display correct output string');
    }

    public function testPunctuation() {
        $form = array();
        $form['dna_input'] = 'ATC;';
        $this->drupalPost('dna_start', $form, t('Submit'));
        $this->assertText('Invalid character(s) submitted. Please stick with A,T,C,G without punctuation or spaces.', 'Punctuation rejected appropriately');
    }
}

class DnaTestCase extends DrupalUnitTestCase
{

    public static function getInfo() {
        return array(
            'name' => 'DNA Unit Tests',
            'description' => 'Unit Tests for the DNA module.',
            'group' => 'DNA Module Tests',
        );
    }

    function testDNA() {
        $description = 'The input of A should return T.';
        $input = 'A';
        $result = dna_match($input);
        $expected_output = 'T';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'The input of T should return A.';
        $input = 'T';
        $result = dna_match($input);
        $expected_output = 'A';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'The input of C should return G.';
        $input = 'C';
        $result = dna_match($input);
        $expected_output = 'G';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'The input of G should return C.';
        $input = 'G';
        $result = dna_match($input);
        $expected_output = 'C';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'Accepts lowercase characters';
        $input = 'a';
        $result = dna_match($input);
        $expected_output = 'T';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'Accepts a combination';
        $input = 'ATGC';
        $result = dna_match($input);
        $expected_output = 'TACG';
        $this->assertEqual($result, $expected_output, $description);

    }

}
